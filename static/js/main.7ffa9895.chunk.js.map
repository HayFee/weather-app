{"version":3,"sources":["Forecast.js","App.js","reportWebVitals.js","index.js"],"names":["api","Forecast","useState","query","setQuery","forecast","setForecast","city","setCity","country","setCountry","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","className","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","dailyData","list","filter","reading","dt_txt","includes","console","log","name","Array","isArray","map","index","Date","dt","Math","round","main","temp","temp_max","temp_min","humidity","weather","App","setWeather","isValid","setIsValid","cod","sys","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ffa9895.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst api = {\n    key: \"97f6c11a941a6c4ff34b1c26885988e1\",\n    base: \"https://api.openweathermap.org/data/2.5/\"\n  }\n\n  function Forecast() {\n\n    const [query, setQuery] = useState('');\n    const [forecast, setForecast] = useState([]);\n    const [city, setCity] = useState();\n    const [country, setCountry] = useState();\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}forecast?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        const dailyData = result.list.filter(reading => {\n          return reading.dt_txt.includes(\"18:00:00\")\n          }\n        )\n        setQuery('');\n        console.log(result);\n\n        setForecast(dailyData);\n        console.log(dailyData);\n\n        setCity(result.city && result.city.name);\n        setCountry(result.city && result.city.country);\n      });\n\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n\n  }\n\nreturn (\n    <div className=\"search-box\">\n    <input\n     type=\"text\"\n     className=\"search-bar\"\n     placeholder=\"Get Forecast...\"\n     onChange={e => setQuery(e.target.value)}\n     value={query}\n     onKeyPress={search}\n     />\n\n    <div className=\"location\">{city} {country}</div>\n     {Array.isArray(forecast)?\n      forecast.map((day, index) => (\n        <div className=\"weather-box\" key={index}>\n          <div className=\"location-box\">\n            <div className=\"date\">\n              {dateBuilder(new Date(day.dt * 1000))}\n            </div>\n            <div className=\"temp\">\n              {Math.round(day.main.temp)}째c\n              <br/>\n              <div className =\"minmaxhumidity\">\n                Max: {Math.round(day.main.temp_max)}째c\n                <br/>\n                Min: {Math.round(day.main.temp_min)}째c\n                <br/>\n                Humidity: {Math.round(day.main.humidity)}\n                <br/>\n              <div className=\"weather\">{day.weather[0].main}</div>\n            </div>\n            </div>\n          </div>\n        </div>\n      ))\n     : <div> \"No data\" </div>}\n\n  </div>\n\n);\n\n}\n\nexport default Forecast;","import React, { useState } from 'react';\nimport Forecast from \"./Forecast\";\n\nconst api = {\n  key: \"97f6c11a941a6c4ff34b1c26885988e1\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [isValid, setIsValid] = useState(true);\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n        fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          if (result.cod !== 200) {\n            setIsValid(false);\n            return;\n          }\n\n          setWeather(result);\n          setQuery('');\n          setIsValid(true);\n          console.log(result);\n        });\n    }\n    //evt.preventDefault();\n  }\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className={\n      (typeof weather.main !== \"undefined\")\n      ? ((weather.main.temp > 16)\n        ? 'app warm'\n        : 'app')\n      : 'app'}>\n      <main>\n      <div className=\"title\">Weather Finder</div>\n      <br/>\n      <br/>\n      <Forecast/>\n        <div className=\"search-box\">\n          <input\n           type=\"text\"\n           className=\"search-bar\"\n           placeholder=\"Search...\"\n           onChange={e => setQuery(e.target.value)}\n           value={query}\n           onKeyPress={search}\n           />\n        </div>\n        {isValid ?\n          <div>\n          {weather.sys && weather.main && (\n              <div>\n                  <div className=\"location-box\">\n                      <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                      <div className=\"date\">{dateBuilder(new Date())}</div>\n                  </div>\n                  <div className=\"weather-box\">\n                      <div className=\"temp\">\n                      {Math.round(weather.main.temp)}째c\n                      </div>\n                      <div className=\"weather\">{weather.weather[0].main}</div>\n                  </div>\n              </div>\n          )}\n          </div>\n          :\n              <div className=\"error\">\n                Please enter a valid City Name.\n              </div>\n          }\n       </main>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}