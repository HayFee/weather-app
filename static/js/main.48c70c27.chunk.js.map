{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","isValid","setIsValid","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","cod","console","log","sys","name","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLACMA,EACC,mCADDA,EAEE,2CAqFOC,MAlFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAkCb,OACE,qBAAKC,UACsB,qBAAjBJ,EAAQK,MACZL,EAAQK,KAAKC,KAAO,GACpB,WAEF,MALJ,SAME,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACCG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIX,EAASW,EAAEC,OAAOC,QACjCA,MAAOd,EACPe,WA5CM,SAAAC,GACG,UAAZA,EAAIC,KACJC,MAAM,GAAD,OAAIrB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACe,MAAfA,EAAOC,KAKXpB,EAAWmB,GACXrB,EAAS,IACTI,GAAW,GACXmB,QAAQC,IAAIH,IAPVjB,GAAW,WA0CdD,EACC,8BACCF,EAAQwB,KAAOxB,EAAQK,MACpB,gCACI,sBAAKD,UAAU,eAAf,UACI,sBAAKA,UAAU,WAAf,UAA2BJ,EAAQyB,KAAnC,KAA2CzB,EAAQwB,IAAIE,WACvD,qBAAKtB,UAAU,OAAf,SArCA,SAACuB,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA4BOE,CAAY,IAAIC,WAE3C,sBAAKjC,UAAU,cAAf,UACI,sBAAKA,UAAU,OAAf,UACCkC,KAAKC,MAAMvC,EAAQK,KAAKC,MADzB,WAGA,qBAAKF,UAAU,UAAf,SAA0BJ,EAAQA,QAAQ,GAAGK,eAMrD,qBAAKD,UAAU,QAAf,mDCjECoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.48c70c27.chunk.js","sourcesContent":["import React, { useState } from 'react';\nconst api = {\n  key: \"97f6c11a941a6c4ff34b1c26885988e1\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [isValid, setIsValid] = useState(true);\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n        fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          if (result.cod !== 200) {\n            setIsValid(false);\n            return;\n          }  \n\n          setWeather(result);\n          setQuery('');\n          setIsValid(true);\n          console.log(result);\n        });\n    }\n  }\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className={\n      (typeof weather.main !== \"undefined\") \n      ? ((weather.main.temp > 16) \n        ? 'app warm' \n        : 'app') \n      : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input \n           type=\"text\"\n           className=\"search-bar\"\n           placeholder=\"Search...\"\n           onChange={e => setQuery(e.target.value)}\n           value={query}\n           onKeyPress={search}\n           />\n\n        </div>\n        {isValid ?\n          <div>\n          {weather.sys && weather.main && (\n              <div>\n                  <div className=\"location-box\">\n                      <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                      <div className=\"date\">{dateBuilder(new Date())}</div>\n                  </div>\n                  <div className=\"weather-box\">\n                      <div className=\"temp\">\n                      {Math.round(weather.main.temp)}Â°c\n                      </div>\n                      <div className=\"weather\">{weather.weather[0].main}</div>\n                  </div>\n              </div>\n          )}\n          </div>\n          : \n              <div className=\"error\">\n                Please enter a valid City Name.\n              </div>\n                        \n                    }\n       </main>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}